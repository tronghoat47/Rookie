// <auto-generated />
using System;
using App.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructure.Migrations
{
    [DbContext(typeof(RookieDBContext))]
    partial class RookieDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Models.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Hanoi");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments", t =>
                        {
                            t.HasCheckConstraint("CK_Department_Location", "Location IN ('Hanoi', 'HCM', 'Danang')");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Location = "Hanoi",
                            Name = "Software Development"
                        },
                        new
                        {
                            Id = 2L,
                            Location = "Danang",
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 3L,
                            Location = "Hanoi",
                            Name = "Accountant"
                        },
                        new
                        {
                            Id = 4L,
                            Location = "HCM",
                            Name = "Human Resource"
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "Address 1",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1L,
                            Email = "email1@example.com",
                            JoinDate = new DateTime(2000, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee 1",
                            Phone = "1234567890"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "Address 2",
                            DateOfBirth = new DateTime(1991, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2L,
                            Email = "email2@example.com",
                            JoinDate = new DateTime(2002, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee 2",
                            Phone = "1234567891"
                        },
                        new
                        {
                            Id = 3L,
                            Address = "Address 3",
                            DateOfBirth = new DateTime(1992, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3L,
                            Email = "email3@example.com",
                            JoinDate = new DateTime(2003, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee 3",
                            Phone = "1234567892"
                        },
                        new
                        {
                            Id = 4L,
                            Address = "Address 4",
                            DateOfBirth = new DateTime(1993, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4L,
                            Email = "email4@example.com",
                            JoinDate = new DateTime(2004, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee 4",
                            Phone = "1234567893"
                        },
                        new
                        {
                            Id = 5L,
                            Address = "Address 5",
                            DateOfBirth = new DateTime(1994, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1L,
                            Email = "email5@example.com",
                            JoinDate = new DateTime(2005, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee 5",
                            Phone = "1234567894"
                        },
                        new
                        {
                            Id = 6L,
                            Address = "Address 6",
                            DateOfBirth = new DateTime(1995, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2L,
                            Email = "email6@example.com",
                            JoinDate = new DateTime(2006, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee 6",
                            Phone = "1234567895"
                        },
                        new
                        {
                            Id = 7L,
                            Address = "Address 7",
                            DateOfBirth = new DateTime(1996, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3L,
                            Email = "email7@example.com",
                            JoinDate = new DateTime(2007, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee 7",
                            Phone = "1234567896"
                        },
                        new
                        {
                            Id = 8L,
                            Address = "Address 8",
                            DateOfBirth = new DateTime(1997, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4L,
                            Email = "email8@example.com",
                            JoinDate = new DateTime(2008, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee 8",
                            Phone = "1234567897"
                        },
                        new
                        {
                            Id = 9L,
                            Address = "Address 9",
                            DateOfBirth = new DateTime(1998, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1L,
                            Email = "email9@example.com",
                            JoinDate = new DateTime(2009, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee 9",
                            Phone = "1234567898"
                        },
                        new
                        {
                            Id = 10L,
                            Address = "Address 10",
                            DateOfBirth = new DateTime(1999, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2L,
                            Email = "email10@example.com",
                            JoinDate = new DateTime(2010, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee 10",
                            Phone = "1234567899"
                        },
                        new
                        {
                            Id = 11L,
                            Address = "Address 11",
                            DateOfBirth = new DateTime(2000, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3L,
                            Email = "email11@example.com",
                            JoinDate = new DateTime(2011, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee 11",
                            Phone = "1234567800"
                        },
                        new
                        {
                            Id = 12L,
                            Address = "Address 12",
                            DateOfBirth = new DateTime(2001, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4L,
                            Email = "email12@example.com",
                            JoinDate = new DateTime(2012, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee 12",
                            Phone = "1234567801"
                        },
                        new
                        {
                            Id = 13L,
                            Address = "Address 13",
                            DateOfBirth = new DateTime(2002, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1L,
                            Email = "email13@example.com",
                            JoinDate = new DateTime(2013, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee 13",
                            Phone = "1234567802"
                        },
                        new
                        {
                            Id = 14L,
                            Address = "Address 14",
                            DateOfBirth = new DateTime(2003, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2L,
                            Email = "email14@example.com",
                            JoinDate = new DateTime(2014, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee 14",
                            Phone = "1234567803"
                        },
                        new
                        {
                            Id = 15L,
                            Address = "Address 15",
                            DateOfBirth = new DateTime(2004, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3L,
                            Email = "email15@example.com",
                            JoinDate = new DateTime(2015, 10, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Employee 15",
                            Phone = "1234567804"
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("New");

                    b.HasKey("Id");

                    b.ToTable("Projects", t =>
                        {
                            t.HasCheckConstraint("CK_Project_StartDate_EndDate", "StartDate < EndDate");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Description for Project 1",
                            EndDate = new DateTime(2023, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Project 1",
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "New"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Description for Project 2",
                            EndDate = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Project 2",
                            StartDate = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "In Progress"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Description for Project 3",
                            EndDate = new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Project 3",
                            StartDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("App.Domain.Models.ProjectEmployee", b =>
                {
                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ProjectEmployees");

                    b.HasData(
                        new
                        {
                            ProjectId = 1L,
                            EmployeeId = 5L,
                            IsWorking = true
                        },
                        new
                        {
                            ProjectId = 2L,
                            EmployeeId = 6L,
                            IsWorking = true
                        },
                        new
                        {
                            ProjectId = 3L,
                            EmployeeId = 7L,
                            IsWorking = false
                        },
                        new
                        {
                            ProjectId = 1L,
                            EmployeeId = 8L,
                            IsWorking = true
                        },
                        new
                        {
                            ProjectId = 2L,
                            EmployeeId = 9L,
                            IsWorking = true
                        },
                        new
                        {
                            ProjectId = 3L,
                            EmployeeId = 10L,
                            IsWorking = false
                        },
                        new
                        {
                            ProjectId = 1L,
                            EmployeeId = 11L,
                            IsWorking = true
                        },
                        new
                        {
                            ProjectId = 2L,
                            EmployeeId = 12L,
                            IsWorking = true
                        },
                        new
                        {
                            ProjectId = 3L,
                            EmployeeId = 13L,
                            IsWorking = false
                        },
                        new
                        {
                            ProjectId = 1L,
                            EmployeeId = 6L,
                            IsWorking = true
                        },
                        new
                        {
                            ProjectId = 3L,
                            EmployeeId = 14L,
                            IsWorking = true
                        },
                        new
                        {
                            ProjectId = 2L,
                            EmployeeId = 1L,
                            IsWorking = false
                        },
                        new
                        {
                            ProjectId = 1L,
                            EmployeeId = 1L,
                            IsWorking = true
                        },
                        new
                        {
                            ProjectId = 3L,
                            EmployeeId = 1L,
                            IsWorking = true
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Salaries", t =>
                        {
                            t.HasCheckConstraint("CK_Salary_Amount", "Amount > 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 50000m,
                            EmployeeId = 1L
                        },
                        new
                        {
                            Id = 15,
                            Amount = 60000m,
                            EmployeeId = 2L
                        },
                        new
                        {
                            Id = 2,
                            Amount = 55000m,
                            EmployeeId = 3L
                        },
                        new
                        {
                            Id = 3,
                            Amount = 58000m,
                            EmployeeId = 4L
                        },
                        new
                        {
                            Id = 4,
                            Amount = 52000m,
                            EmployeeId = 5L
                        },
                        new
                        {
                            Id = 5,
                            Amount = 53000m,
                            EmployeeId = 6L
                        },
                        new
                        {
                            Id = 6,
                            Amount = 56000m,
                            EmployeeId = 7L
                        },
                        new
                        {
                            Id = 7,
                            Amount = 57000m,
                            EmployeeId = 8L
                        },
                        new
                        {
                            Id = 8,
                            Amount = 54000m,
                            EmployeeId = 9L
                        },
                        new
                        {
                            Id = 9,
                            Amount = 59000m,
                            EmployeeId = 10L
                        },
                        new
                        {
                            Id = 10,
                            Amount = 62000m,
                            EmployeeId = 11L
                        },
                        new
                        {
                            Id = 11,
                            Amount = 61000m,
                            EmployeeId = 12L
                        },
                        new
                        {
                            Id = 12,
                            Amount = 57000m,
                            EmployeeId = 13L
                        },
                        new
                        {
                            Id = 13,
                            Amount = 56000m,
                            EmployeeId = 14L
                        },
                        new
                        {
                            Id = 14,
                            Amount = 60000m,
                            EmployeeId = 15L
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Employee", b =>
                {
                    b.HasOne("App.Domain.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("App.Domain.Models.ProjectEmployee", b =>
                {
                    b.HasOne("App.Domain.Models.Employee", "Employee")
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Models.Project", "Project")
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("App.Domain.Models.Salary", b =>
                {
                    b.HasOne("App.Domain.Models.Employee", "Employee")
                        .WithOne("Salary")
                        .HasForeignKey("App.Domain.Models.Salary", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("App.Domain.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("App.Domain.Models.Employee", b =>
                {
                    b.Navigation("ProjectEmployees");

                    b.Navigation("Salary");
                });

            modelBuilder.Entity("App.Domain.Models.Project", b =>
                {
                    b.Navigation("ProjectEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
